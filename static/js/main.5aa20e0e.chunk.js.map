{"version":3,"sources":["components/NavBar.jsx","components/AddNewChat.jsx","components/Message.jsx","components/ChatCard.jsx","abi.js","App.jsx","index.js"],"names":["NavBar","props","Navbar","bg","variant","Brand","href","Toggle","Collapse","className","Text","Button","style","display","showButton","onClick","a","login","username","AddNewChat","useState","show","setShow","handleClose","position","bottom","padding","margin","width","Modal","onHide","Header","closeButton","Title","Body","Form","Group","Control","required","id","size","type","placeholder","Footer","addHandler","document","getElementById","value","Message","Row","marginRight","Card","border","alignSelf","marginLeft","float","right","timeStamp","Subtitle","sender","data","ChatCard","getMessages","publicKey","name","length","substring","abi","CONTRACT_ADDRESS","App","provider","signer","friends","setFriends","myName","setMyName","myPublicKey","setMyPublicKey","friendname","activeChat","setActiveChat","activeChatMessages","setActiveChatMessages","showConnectButton","setShowConnectButton","myContract","setMyContract","contractABI","connectToMetamask","ethers","providers","Web3Provider","window","ethereum","getSigner","contract","Contract","getAddress","address","checkUserExists","getUsername","prompt","createAccount","alert","enable","addFriend","frnd","concat","sendMessage","recieverAddress","getMessage","friendsPublicKey","messages","forEach","item","nickname","readMessage","timestamp","Date","toNumber","toUTCString","push","useEffect","friendList","getMyFriendList","loadFriends","Messages","map","message","chats","friend","key","Container","Col","overflowY","addChat","xs","height","borderTop","onSubmit","e","preventDefault","ReactDom","render"],"mappings":"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","file":"static/js/main.5aa20e0e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Navbar } from \"react-bootstrap\";\n\n// This component renders the Navbar of our application\nexport function NavBar( props ){\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\"> \n                Avalanche Chat App \n            </Navbar.Brand>\n            <Navbar.Toggle />\n            <Navbar.Collapse className=\"justify-content-end\">\n                <Navbar.Text> \n                    <Button style={{ display: props.showButton }} variant=\"success\" onClick={ async () => { props.login(); }}>\n                        Connect to Metamask\n                    </Button>\n                    <div style={{ display: props.showButton === \"none\" ? \"block\" : \"none\" }}>\n                        Signed in as: \n                        <a href=\"#\"> \n                            { props.username }\n                        </a>\n                    </div>\n                </Navbar.Text>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}","import React from \"react\";\nimport { useState } from \"react\";\nimport { Button, Modal, Form } from \"react-bootstrap\";\n\n// This Modal help Add a new friend\nexport function AddNewChat( props ){\n    const [show, setShow] = useState( false );\n    const handleClose = () => setShow( false );\n    const handleShow = () => setShow( true );\n    return (\n        <div className=\"AddNewChat\" style={{ position:\"absolute\", bottom:\"0px\", padding:\"10px 45px 0 45px\", margin:\"0 95px 0 0\", width:\"97%\" }}>\n            <Button variant=\"success\" className=\"mb-2\" onClick={ handleShow }>\n                + NewChat\n            </Button>\n            <Modal show={ show } onHide={ handleClose }>\n                <Modal.Header closeButton>\n                  <Modal.Title> Add New Friend </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group>\n                        <Form.Control required id=\"addPublicKey\" size=\"text\" type=\"text\" placeholder=\"Enter Friends Public Key\" />\n                        <br />\n                        <Form.Control required id=\"addName\" size=\"text\" type=\"text\" placeholder=\"Name\" />\n                        <br />\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={ handleClose }>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={ () => {\n                        props.addHandler( document.getElementById('addName').value, document.getElementById('addPublicKey').value );\n                        handleClose();\n                    }}>\n                        Add Friend\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>  \n        \n    );\n}","import React from \"react\";\nimport { Row, Card } from \"react-bootstrap\";\n\n// This is a functional component which renders the individual messages\nexport function Message( props ){\n    return (\n        <Row style={{ marginRight:\"0px\" }}>\n            <Card  border=\"success\" style={{ width:'80%', alignSelf:'center', margin:\"0 0 5px \" + props.marginLeft, float:\"right\", right:\"0px\" }}>\n                <Card.Body>\n                    <h6 style={{ float:\"right\" }}> \n                        { props.timeStamp } \n                    </h6>\n                    <Card.Subtitle>\n                        <b>\n                            { props.sender }\n                        </b>\n                    </Card.Subtitle>\n                    <Card.Text>\n                        { props.data }\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </Row>\n    );\n}","import React from \"react\";\nimport { Row, Card } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// This is a function which renders the friends in the friends list\nexport function ChatCard( props ){\n    return (\n        <Row style={{ marginRight:\"0px\" }}>\n            <Card border=\"success\" style={{ width:'100%', alignSelf:'center', marginLeft:\"15px\" }} onClick={ () => { props.getMessages( props.publicKey ); }}>\n              <Card.Body>\n                  <Card.Title> { props.name } </Card.Title>\n                  <Card.Subtitle> { props.publicKey.length > 20 ? props.publicKey.substring(0, 20) + \" ...\" : props.publicKey } </Card.Subtitle>\n              </Card.Body>\n            </Card>\n        </Row> \n    );\n}","export const abi = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"friend_key\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"name\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"addFriend\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"pubkey\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"checkUserExists\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"name\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"createAccount\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getMyFriendList\",\n        \"outputs\": [\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"pubkey\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"string\",\n                        \"name\": \"name\",\n                        \"type\": \"string\"\n                    }\n                ],\n                \"internalType\": \"struct Database.friend[]\",\n                \"name\": \"\",\n                \"type\": \"tuple[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"pubkey\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"getUsername\",\n        \"outputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"friend_key\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"readMessage\",\n        \"outputs\": [\n            {\n                \"components\": [\n                    {\n                        \"internalType\": \"address\",\n                        \"name\": \"sender\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"internalType\": \"uint256\",\n                        \"name\": \"timestamp\",\n                        \"type\": \"uint256\"\n                    },\n                    {\n                        \"internalType\": \"string\",\n                        \"name\": \"msg\",\n                        \"type\": \"string\"\n                    }\n                ],\n                \"internalType\": \"struct Database.message[]\",\n                \"name\": \"\",\n                \"type\": \"tuple[]\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"friend_key\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_msg\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"sendMessage\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n]\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';\nimport { NavBar, ChatCard, Message, AddNewChat } from './components/Components.js';\nimport { ethers } from \"ethers\";\nimport { abi } from \"./abi\";\n\n// Add the contract address inside the quotes\nconst CONTRACT_ADDRESS = \"0xF02C9B63dDaA173AA8a7794B559200A3f0418E92\"; \n\nexport function App( props ) {  \n    const [friends, setFriends] = useState(null);\n    const [myName, setMyName] = useState(null);\n    const [myPublicKey, setMyPublicKey] = useState(null);\n    const [activeChat, setActiveChat] = useState({ friendname: null, publicKey: null });\n    const [activeChatMessages, setActiveChatMessages] = useState(null);\n    const [showConnectButton, setShowConnectButton] = useState(\"block\");\n    const [myContract, setMyContract] = useState(null);\n  \n    // Save the contents of abi in a variable\n    const contractABI = abi; \n    let provider;\n    let signer;\n\n    // Login to Metamask and check the if the user exists else creates one\n    async function login() {\n        let res = await connectToMetamask();\n        if( res === true ) {\n            provider = new ethers.providers.Web3Provider( window.ethereum );\n            signer = provider.getSigner();\n            try {\n\t\t\t\tconst contract = new ethers.Contract( CONTRACT_ADDRESS, contractABI, signer );\n\t\t\t\tsetMyContract( contract );\n\t\t\t\tconst address = await signer.getAddress();         \n\t\t\t\tlet present = await contract.checkUserExists( address );\n\t\t\t\tlet username;\n\t\t\t\tif( present )\n\t\t\t\t\tusername = await contract.getUsername( address );\n\t\t\t\telse {\n\t\t\t\t\tusername = prompt('Enter a username', 'Guest'); \n\t\t\t\t\tif( username === '' ) username = 'Guest';\n\t\t\t\t\tawait contract.createAccount( username );\n\t\t\t\t}\n\t\t\t\tsetMyName( username );\n\t\t\t\tsetMyPublicKey( address );\n\t\t\t\tsetShowConnectButton( \"none\" );\n\t\t\t} catch(err) {\n\t\t\t\talert(\"CONTRACT_ADDRESS not set properly!\");\n\t\t\t}\n        } else {\n            alert(\"Couldn't connect to Metamask\");\n        }    \n    }\n\n    // Check if the Metamask connects \n    async function connectToMetamask() {\n        try {\n            await window.ethereum.enable();\n            return true;\n        } catch(err) {\n            return false;\n        }\n    }\n\n    // Add a friend to the users' Friends List\n    async function addChat( name, publicKey ) {\n        try {\n\t\t\tlet present = await myContract.checkUserExists( publicKey );\n\t\t\tif( !present ) {\n\t\t\t\talert(\"Given address not found: Ask him to join the app :)\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait myContract.addFriend( publicKey, name );\n\t\t\t\tconst frnd = { \"name\": name, \"publicKey\": publicKey };\n\t\t\t\tsetFriends( friends.concat(frnd) );\n\t\t\t} catch(err) {\n\t\t\t\talert(\"Friend already Added! You can't be friend with the same person twice ;P\");\n\t\t\t}\n\t\t} catch(err) {\n\t\t\talert(\"Invalid address!\")\n\t\t}\n    }\n\n    // Sends messsage to an user \n    async function sendMessage( data ) {\n        if( !( activeChat && activeChat.publicKey ) ) return;\n        const recieverAddress = activeChat.publicKey;\n        await myContract.sendMessage( recieverAddress, data );\n    } \n\n    // Fetch chat messages with a friend \n    async function getMessage( friendsPublicKey ) {\n        let nickname;\n        let messages = [];\n        friends.forEach( ( item ) => {\n            if( item.publicKey === friendsPublicKey )\n                nickname = item.name;\n        });\n        // Get messages\n        const data = await myContract.readMessage( friendsPublicKey );\n        data.forEach( ( item ) => {\n            const timestamp = new Date( 1000*item[1].toNumber() ).toUTCString();\n            messages.push({ \"publicKey\": item[0], \"timeStamp\": timestamp, \"data\": item[2] });\n        });\n        setActiveChat({ friendname: nickname, publicKey: friendsPublicKey });\n        setActiveChatMessages( messages );\n    }\n\n    // This executes every time page renders and when myPublicKey or myContract changes\n    useEffect( () => {\n        async function loadFriends() {\n            let friendList = [];\n            // Get Friends\n            try {\n                const data = await myContract.getMyFriendList();\n                data.forEach( ( item ) => {\n                    friendList.push({ \"publicKey\": item[0], \"name\": item[1] });\n                })\n            } catch(err) {\n                friendList = null;  \n            }\n            setFriends( friendList );\n        }\n        loadFriends();\n    }, [myPublicKey, myContract]);\n\n    // Makes Cards for each Message\n    const Messages = activeChatMessages ? activeChatMessages.map( ( message ) => {\n        let margin = \"5%\";\n        let sender = activeChat.friendname;\n        if( message.publicKey === myPublicKey ) {\n            margin = \"15%\";\n            sender = \"You\";\n        }\n        return (\n            <Message marginLeft={ margin } sender={ sender } data={ message.data } timeStamp={ message.timeStamp } />\n        );\n    }) : null;\n  \n    // Displays each card\n    const chats = friends ? friends.map( ( friend ) => {\n     return (\n         <ChatCard publicKey={ friend.publicKey } name={ friend.name } getMessages={ ( key ) => getMessage( key ) } />\n     );\n    }) : null;\n\n    return (\n        <Container style={{ padding:\"0px\", border:\"1px solid grey\" }}>\n            {/* This shows the navbar with connect button */}\n            <NavBar username={ myName } login={ async () => login() } showButton={ showConnectButton } />\n            <Row>\n                {/* Here the friends list is shown */}\n                <Col style={{ \"paddingRight\":\"0px\", \"borderRight\":\"2px solid #000000\" }}>\n                    <div style={{ \"backgroundColor\":\"#DCDCDC\", \"height\":\"100%\", overflowY:\"auto\" }}>\n                          <Row style={{ marginRight:\"0px\" }}  >\n                              <Card style={{ width:'100%', alignSelf:'center', marginLeft:\"15px\" }}>\n                                <Card.Header>\n                                    Chats\n                                </Card.Header>\n                              </Card>\n                          </Row>\n                          { chats }\n                          <AddNewChat myContract={ myContract } addHandler={ ( name, publicKey ) => addChat( name, publicKey )} />\n                    </div>\n                </Col>\n                <Col xs={ 8 } style={{ \"paddingLeft\":\"0px\" }}>\n                    <div style={{ \"backgroundColor\":\"#DCDCDC\", \"height\":\"100%\" }}>\n                        {/* Chat header with refresh button, username and public key are rendered here */}\n                        <Row style={{ marginRight:\"0px\" }}>\n                              <Card style={{ width:'100%', alignSelf:'center', margin:\"0 0 5px 15px\" }}>\n                                <Card.Header>\n                                    { activeChat.friendname } : { activeChat.publicKey }\n                                    <Button style={{ float:\"right\" }} variant=\"warning\" onClick={ () => {\n                                        if( activeChat && activeChat.publicKey )\n                                            getMessage( activeChat.publicKey );\n                                    } }>\n                                        Refresh\n                                    </Button>\n                                </Card.Header>\n                            </Card>\n                        </Row>\n                        {/* The messages will be shown here */}\n                        <div className=\"MessageBox\" style={{ height:\"400px\", overflowY:\"auto\" }}>\n                           { Messages }\n                        </div>\n                        {/* The form with send button and message input fields */}\n                        <div className=\"SendMessage\"  style={{ borderTop:\"2px solid black\", position:\"relative\", bottom:\"0px\", padding:\"10px 45px 0 45px\", margin:\"0 95px 0 0\", width:\"97%\" }}>\n                            <Form onSubmit={ (e) => {\n\t\t\t                \te.preventDefault();\n\t\t\t                \tsendMessage( document.getElementById( 'messageData' ).value );\n\t\t\t                \tdocument.getElementById( 'messageData' ).value = \"\";\n\t\t\t                }}>\n                                <Form.Row className=\"align-items-center\">\n                                    <Col xs={9}>\n                                        <Form.Control id=\"messageData\" className=\"mb-2\"  placeholder=\"Send Message\" />\n                                    </Col>\n                                    <Col >\n                                      <Button className=\"mb-2\" style={{ float:\"right\" }} onClick={ () => {\n                                          sendMessage( document.getElementById( 'messageData' ).value );\n                                          document.getElementById( 'messageData' ).value = \"\";\n                                      }}>\n                                        Send\n                                      </Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </div> \n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { App } from \"../src/App.jsx\";\n\nReactDom.render( \n    <App /> ,\n    document.getElementById('root')\n);"],"sourceRoot":""}